{"version":3,"sources":["../src/container.js"],"names":["Container","props","updateOffset","inherited","offset","channel","update","data","node","getChildContext","componentWillMount","parentChannel","context","subscribe","componentDidMount","findDOMNode","componentWillUnmount","unsubscribe","render","children","Component","contextTypes","any","childContextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;IAEqBA,S;;;AAUnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,+DACjB,4BAAMA,KAAN,CADiB;;AAAA,UA0BnBC,YA1BmB,GA0BJ,gBAA2B;AAAA,UAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,UAAbC,MAAa,QAAbA,MAAa;;AACxC,YAAKC,OAAL,CAAaC,MAAb,CAAoB,UAACC,IAAD,EAAU;AAAEA,aAAKJ,SAAL,GAAiBA,YAAYC,MAA7B;AAAqC,OAArE;AACD,KA5BkB;;AAEjB,UAAKC,OAAL,GAAe,sBAAY,EAAEF,WAAW,CAAb,EAAgBC,QAAQ,CAAxB,EAA2BI,MAAM,IAAjC,EAAZ,CAAf;AAFiB;AAGlB;;sBAEDC,e,8BAAkB;AAChB,WAAO,EAAE,kBAAkB,KAAKJ,OAAzB,EAAP;AACD,G;;sBAEDK,kB,iCAAqB;AACnB,QAAMC,gBAAgB,KAAKC,OAAL,CAAa,gBAAb,CAAtB;AACA,QAAID,aAAJ,EAAmBA,cAAcE,SAAd,CAAwB,KAAKX,YAA7B;AACpB,G;;sBAEDY,iB,gCAAoB;AAClB,QAAMN,OAAO,mBAASO,WAAT,CAAqB,IAArB,CAAb;AACA,SAAKV,OAAL,CAAaC,MAAb,CAAoB,UAACC,IAAD,EAAU;AAAEA,WAAKC,IAAL,GAAYA,IAAZ;AAAkB,KAAlD;AACD,G;;sBAEDQ,oB,mCAAuB;AACrB,SAAKX,OAAL,CAAaC,MAAb,CAAoB,UAACC,IAAD,EAAU;AAAEA,WAAKC,IAAL,GAAY,IAAZ;AAAkB,KAAlD;;AAEA,QAAMG,gBAAgB,KAAKC,OAAL,CAAa,gBAAb,CAAtB;AACA,QAAID,aAAJ,EAAmBA,cAAcM,WAAd,CAA0B,KAAKf,YAA/B;AACpB,G;;sBAMDgB,M,qBAAS;AACP,WAAO;AAAA;AAAA,iCAAS,KAAKjB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,WAAKA,KAAL,CAAWkB;AADP,KAAP;AAGD,G;;;EA5CoC,gBAAMC,S,UAEpCC,Y,GAAe;AACpB,oBAAkB,oBAAUC;AADR,C,SAIfC,iB,GAAoB;AACzB,oBAAkB,oBAAUD;AADH,C;kBANRtB,S","file":"container.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nimport Channel from './channel';\n\nexport default class Container extends React.Component {\n\n  static contextTypes = {\n    'sticky-channel': PropTypes.any,\n  };\n\n  static childContextTypes = {\n    'sticky-channel': PropTypes.any,\n  };\n\n  constructor(props) {\n    super(props);\n    this.channel = new Channel({ inherited: 0, offset: 0, node: null });\n  }\n\n  getChildContext() {\n    return { 'sticky-channel': this.channel };\n  }\n\n  componentWillMount() {\n    const parentChannel = this.context['sticky-channel'];\n    if (parentChannel) parentChannel.subscribe(this.updateOffset);\n  }\n\n  componentDidMount() {\n    const node = ReactDOM.findDOMNode(this);\n    this.channel.update((data) => { data.node = node });\n  }\n\n  componentWillUnmount() {\n    this.channel.update((data) => { data.node = null });\n\n    const parentChannel = this.context['sticky-channel'];\n    if (parentChannel) parentChannel.unsubscribe(this.updateOffset);\n  }\n\n  updateOffset = ({ inherited, offset }) => {\n    this.channel.update((data) => { data.inherited = inherited + offset });\n  }\n\n  render() {\n    return <div {...this.props}>\n      {this.props.children}\n    </div>\n  }\n}\n"]}