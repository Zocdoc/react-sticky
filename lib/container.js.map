{"version":3,"sources":["../src/container.js"],"names":["React","PropTypes","ReactDOM","Channel","Container","props","updateOffset","inherited","offset","channel","update","data","node","parentChannel","context","subscribe","findDOMNode","unsubscribe","children","Component","contextTypes","any","childContextTypes"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,OAAOC,OAAP,MAAoB,WAApB;;IAEqBC,S;;;AAUnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,sHACXA,KADW;;AAAA,UA0BnBC,YA1BmB,GA0BJ,gBAA2B;AAAA,UAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,UAAbC,MAAa,QAAbA,MAAa;;AACxC,YAAKC,OAAL,CAAaC,MAAb,CAAoB,UAACC,IAAD,EAAU;AAAEA,aAAKJ,SAAL,GAAiBA,YAAYC,MAA7B;AAAqC,OAArE;AACD,KA5BkB;;AAEjB,UAAKC,OAAL,GAAe,IAAIN,OAAJ,CAAY,EAAEI,WAAW,CAAb,EAAgBC,QAAQ,CAAxB,EAA2BI,MAAM,IAAjC,EAAZ,CAAf;AAFiB;AAGlB;;;;sCAEiB;AAChB,aAAO,EAAE,kBAAkB,KAAKH,OAAzB,EAAP;AACD;;;yCAEoB;AACnB,UAAMI,gBAAgB,KAAKC,OAAL,CAAa,gBAAb,CAAtB;AACA,UAAID,aAAJ,EAAmBA,cAAcE,SAAd,CAAwB,KAAKT,YAA7B;AACpB;;;wCAEmB;AAClB,UAAMM,OAAOV,SAASc,WAAT,CAAqB,IAArB,CAAb;AACA,WAAKP,OAAL,CAAaC,MAAb,CAAoB,UAACC,IAAD,EAAU;AAAEA,aAAKC,IAAL,GAAYA,IAAZ;AAAkB,OAAlD;AACD;;;2CAEsB;AACrB,WAAKH,OAAL,CAAaC,MAAb,CAAoB,UAACC,IAAD,EAAU;AAAEA,aAAKC,IAAL,GAAY,IAAZ;AAAkB,OAAlD;;AAEA,UAAMC,gBAAgB,KAAKC,OAAL,CAAa,gBAAb,CAAtB;AACA,UAAID,aAAJ,EAAmBA,cAAcI,WAAd,CAA0B,KAAKX,YAA/B;AACpB;;;6BAMQ;AACP,aAAO;AAAA;AAAS,aAAKD,KAAd;AACJ,aAAKA,KAAL,CAAWa;AADP,OAAP;AAGD;;;;EA5CoClB,MAAMmB,S;;AAAxBf,S,CAEZgB,Y,GAAe;AACpB,oBAAkBnB,UAAUoB;AADR,C;AAFHjB,S,CAMZkB,iB,GAAoB;AACzB,oBAAkBrB,UAAUoB;AADH,C;eANRjB,S","file":"container.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nimport Channel from './channel';\n\nexport default class Container extends React.Component {\n\n  static contextTypes = {\n    'sticky-channel': PropTypes.any,\n  };\n\n  static childContextTypes = {\n    'sticky-channel': PropTypes.any,\n  };\n\n  constructor(props) {\n    super(props);\n    this.channel = new Channel({ inherited: 0, offset: 0, node: null });\n  }\n\n  getChildContext() {\n    return { 'sticky-channel': this.channel };\n  }\n\n  componentWillMount() {\n    const parentChannel = this.context['sticky-channel'];\n    if (parentChannel) parentChannel.subscribe(this.updateOffset);\n  }\n\n  componentDidMount() {\n    const node = ReactDOM.findDOMNode(this);\n    this.channel.update((data) => { data.node = node });\n  }\n\n  componentWillUnmount() {\n    this.channel.update((data) => { data.node = null });\n\n    const parentChannel = this.context['sticky-channel'];\n    if (parentChannel) parentChannel.unsubscribe(this.updateOffset);\n  }\n\n  updateOffset = ({ inherited, offset }) => {\n    this.channel.update((data) => { data.inherited = inherited + offset });\n  }\n\n  render() {\n    return <div {...this.props}>\n      {this.props.children}\n    </div>\n  }\n}\n"]}